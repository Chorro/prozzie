version: 2

# Prozzie installation & test execution template
P_tests: &P_tests
  environment:
    PROZZIE_PREFIX: /opt/prozzie
    KCOV_FLAGS: --include-path=/opt/prozzie,/root/project/setups
    KCOV_OUT: /tmp/coverage
  steps:
    - setup_remote_docker
    - checkout
    - run:
        name: Install prozzie & dependencies
        environment:
          HTTP_POST_PARAMS: prozzieapi  # Prozzie api key
          HTTP_ENDPOINT: localhost
        # yes will fail
        command: >
          set +o pipefail;
          yes |
          env PREFIX="${PROZZIE_PREFIX}" INTERFACE_IP=${HOSTNAME}
          kcov ${KCOV_FLAGS} install_cov setups/linux_setup.sh
    - run:
        name: Check all base services are up
        command: >
          [[ $("${PROZZIE_PREFIX}"/bin/prozzie compose ps --services | sort | \
                                                           tee /dev/stderr) == \
             $("$PROZZIE_PREFIX"/bin/prozzie up -d >&2 && \
               "${PROZZIE_PREFIX}"/bin/prozzie compose ps --services | sort | \
                                                           tee /dev/stderr) ]]
    # Circleci forbids us to communicate with remote docker host, so we need
    # to simulate external kafka port forwarding
    - run:
        name: Expose kafka port
        background: true
        # Need to use docker -e because a socat parsing error
        command: >-
            socat TCP-LISTEN:9092,reuseaddr,fork
            EXEC:'docker run --network prozzie_default -i alpine/socat
            STDIO TCP\:prozzie_kafka_1\:9092'
    - run:
        name: Expose http2k port
        background: true
        command: >-
            socat TCP-LISTEN:7980,reuseaddr,fork
            EXEC:'docker run --network prozzie_default -i alpine/socat
            STDIO TCP\:prozzie_http2k_1\:7980'
    - run:
        name: Expose meraki port
        background: true
        command: >-
            socat TCP-LISTEN:2057,reuseaddr,fork
            EXEC:'docker run --network prozzie_default -i alpine/socat
            STDIO TCP\:prozzie_meraki_1\:2057'
    - run:
        name: Expose syslog port
        background: true
        command: >-
          socat UDP-LISTEN:1514,reuseaddr,fork
          EXEC:'docker run --network prozzie_default -i alpine/socat
          STDIO UDP\:prozzie_kafka-connect_1\:1514'
    - run:
        name: Expose monitor port
        background: true
        command: >-
            socat UDP-LISTEN:162,reuseaddr,fork
            EXEC:'docker run --network prozzie_default -i alpine/socat
            STDIO UDP\:prozzie_monitor_1\:162'
    - run:
        name: Run not parallel tests
        command: cd tests; make tests_config01.cov tests_upgrade01.cov tests_monitor01.cov
    - run:
        name: Run parallel tests
        command: cd tests; make -j 6 coverage
    - run: mkdir -p /tmp/coverage
    - run:
        name: Merge all coverage
        command: kcov --merge ${KCOV_OUT}/${CIRCLE_JOB} install_cov tests/coverage.html
    - run:
        name: Save prozzie installation for future use
        command: |
          mkdir -p /tmp/prozzie/${CIRCLE_JOB}
          rsync -a /opt/prozzie /tmp/prozzie/${CIRCLE_JOB}/
    - store_artifacts:
        path: '/tmp/coverage'
    - persist_to_workspace:
        root: /tmp
        paths:
          - coverage
          - prozzie

jobs:
  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine:v0.5.0
    steps:
      - checkout
      - run: >-
          find . \( -name '*.bash' -o -name '*.sh' \) \
              -exec /bin/shellcheck -x -e SC1090,SC1091 {} \+
      - run:
          name: Check for end of line blanks in text files
          command: >
            ! find  . \( \
              -name '*.md' -o -name '*.py' -o -name '*.bash' -o -name '*.sh' \
              -o name Dockerfile \) \
            -exec grep -n '[[:blank:]]$' {} \+
      - run:
          name: Check for newline at file's end
          command: >
            ! find  . \( \
              -name '*.md' -o -name '*.py' -o -name '*.bash' -o -name '*.sh' \
              -o name Dockerfile \) \
            -exec sh -c '[ 'x' != "x$(tail -c 1 "$1")" ]' _ {} \; -print | grep '.*'

  flake8:
    docker:
      - image: alpine/flake8:3.5.0
    steps:
      - checkout
      - run: flake8 .

  ubuntu16.04:
    <<: *P_tests
    docker:
      - image: wizzieio/prozzie-test-env:ubuntu-16.04

  ubuntu18.04:
    <<: *P_tests
    docker:
      - image: wizzieio/prozzie-test-env:ubuntu-18.04

  debian9:
    <<: *P_tests
    docker:
      - image: wizzieio/prozzie-test-env:debian-9

  debianbuster:
    <<: *P_tests
    docker:
      - image: wizzieio/prozzie-test-env:debian-buster

  centos7:
    <<: *P_tests
    docker:
      - image: wizzieio/prozzie-test-env:centos-7

  coverage:
    docker:
      - image: wizzieio/prozzie-test-env:ubuntu-18.04
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Recover prozzie installation
          command: ln -s /tmp/workspace/prozzie/ubuntu16.04/prozzie/ /opt/prozzie
      - run:
          name: Merge all coverage
          command: kcov --merge /tmp/coverage /tmp/workspace/coverage/*
      - store_artifacts:
          path: '/tmp/coverage'

workflows:
  version: 2
  tests:
    jobs:
      - flake8
      - shellcheck
      - ubuntu16.04
      - ubuntu18.04
      - centos7
      - debian9
      - debianbuster
      - coverage:
          requires:
            - ubuntu16.04
            - ubuntu18.04
            - centos7
            - debian9
            - debianbuster
