--- a/pexpect/pty_spawn.py	2018-12-26 19:00:18.353512549 +0000
+++ b/pexpect/pty_spawn.py	2018-12-26 19:02:02.570167447 +0000
@@ -35,7 +35,8 @@
     def __init__(self, command, args=[], timeout=30, maxread=2000,
                  searchwindowsize=None, logfile=None, cwd=None, env=None,
                  ignore_sighup=False, echo=True, preexec_fn=None,
-                 encoding=None, codec_errors='strict', dimensions=None):
+                 encoding=None, codec_errors='strict', dimensions=None,
+                 pass_fds=()):
         '''This is the constructor. The command parameter may be a string that
         includes a command and any arguments to the command. For example::
 
@@ -175,6 +176,10 @@
         The dimensions attribute specifies the size of the pseudo-terminal as
         seen by the subprocess, and is specified as a two-entry tuple (rows,
         columns). If this is unspecified, the defaults in ptyprocess will apply.
+
+        By default, all file descriptors except 0, 1 and 2 are closed. This
+        behavior can be overridden with pass_fds attribute, a list of file
+        descriptors to keep open between the parent and the child.
         '''
         super(spawn, self).__init__(timeout=timeout, maxread=maxread, searchwindowsize=searchwindowsize,
                                     logfile=logfile, encoding=encoding, codec_errors=codec_errors)
@@ -191,7 +196,7 @@
             self.args = None
             self.name = '<pexpect factory incomplete>'
         else:
-            self._spawn(command, args, preexec_fn, dimensions)
+            self._spawn(command, args, preexec_fn, dimensions, pass_fds)
 
     def __str__(self):
         '''This returns a human-readable string that represents the state of
@@ -227,7 +232,8 @@
         s.append('delayafterterminate: ' + str(self.delayafterterminate))
         return '\n'.join(s)
 
-    def _spawn(self, command, args=[], preexec_fn=None, dimensions=None):
+    def _spawn(self, command, args=[], preexec_fn=None, dimensions=None,
+               pass_fds=()):
         '''This starts the given command in a child process. This does all the
         fork/exec type of stuff for a pty. This is called by __init__. If args
         is empty then command will be parsed (split on spaces) and args will be
@@ -273,7 +279,8 @@
         assert self.pid is None, 'The pid member must be None.'
         assert self.command is not None, 'The command member must not be None.'
 
-        kwargs = {'echo': self.echo, 'preexec_fn': preexec_fn}
+        kwargs = {'echo': self.echo, 'preexec_fn': preexec_fn,
+                  'pass_fds': pass_fds}
         if self.ignore_sighup:
             def preexec_wrapper():
                 "Set SIGHUP to be ignored, then call the real preexec_fn"
